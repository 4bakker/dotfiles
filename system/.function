# Update

function update() {
    sudo softwareupdate -i -a
    brew update
    brew upgrade
    npm update npm -g
    npm update -g
    sudo gem update --system
    sudo gem update
}

# Clean caches

function cleanup() {
    npm cache clean
    brew cleanup
    brew cask cleanup
    emptytrash
    cleanupds
}

# Create a new directory and enter it

function mk() {
    mkdir -p "$@" && cd "$@"
}

# Find file/dir (fuzzy)

function ff() {  find . -type f -name "${1}";}
function fff() { find . -type f -name "*${1}*";}
function fd() {  find . -type d -name "${1}";}
function fdf() { find . -type d -name "*${1}*";}

# Show disk usage of current folder, or list with depth

function duf() {
    du -d ${1} -c | sort -r -n | awk '{split("K M G",v); s=1; while($1>1024){$1/=1024; s++} print int($1)v[s]"\t"$2}'
}

# Open man page as PDF

function manpdf() {
    man -t "${1}" | open -f -a /Applications/Preview.app/
}

# Show line, optionally show surrounding lines

line () {
    local line_number=$1
    local lines_around=${2:-0}
    sed -n "`expr $line_number - $lines_around`,`expr $line_number + $lines_around`p"
}

# Extract many types of compress files
# credit: http://nparikh.org/notes/zshrc.txt

extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file to extract"
    fi
}

# Check if resource is served compressed

function check_compression() {
    curl --write-out 'Size (uncompressed) = %{size_download}\n' --silent --output /dev/null $1
    curl --header 'Accept-Encoding: gzip,deflate,compress' --write-out 'Size (compressed) =   %{size_download}\n' --silent --output /dev/null $1
    curl --head --header 'Accept-Encoding: gzip,deflate' --silent $1 | grep -i "cache\|content\|vary\|expires"
}

# Get gzipped file size

function gz() {
	local origsize=$(wc -c < "$1")
	local gzipsize=$(gzip -c "$1" | wc -c)
	local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
	local saved=$(echo "($origsize - $gzipsize) * 100/ $origsize" | bc -l)
	printf "orig: %d bytes\ngzip: %d bytes\nsave: %2.0f%% (%2.0f%%)\n" "$origsize" "$gzipsize" "$saved" "$ratio"
}

# Create a data URL from a file

function dataurl() {
    local mimeType=$(file --mime-type "$1" | cut -d ' ' -f2)
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Show and select the given file(s) in the Finder

function show() {
    # Default to the current directory.
    [ $# -eq 0 ] && set -- .;

    # Build the array of paths for AppleScript.
    local path paths=();
    for path; do
        # Make sure each path exists.
        if ! [ -e "$path" ]; then
            echo "show: $path: No such file or directory";
            continue;
        fi;

        # Crappily re-implement "readlink -f" ("realpath") for Darwin.
        # (The "cd ... > /dev/null" hides CDPATH noise.)
        [ -d "$path" ] \
			&& path="$(cd "$path" > /dev/null && pwd)" \
			|| path="$(cd "$(dirname "$path")" > /dev/null && \
			           echo "$PWD/$(basename "$path")")";

        # Use the "POSIX file" AppleScript syntax.
        paths+=("POSIX file \"${path//\"/\"}\"");
    done;
    [ "${#paths[@]}" -eq 0 ] && return;

    # Group all output to pipe through osacript.
    {
        echo 'tell application "Finder"';
        echo -n 'select {'; # "reveal" would select only the last file.

        for ((i = 0; i < ${#paths[@]}; i++)); do
            echo -n "${paths[$i]}";
            [ $i -lt $(($# - 1)) ] && echo -n ', '; # Ugly array.join()...
        done;

        echo '}';
        echo 'activate';
        echo 'end tell';
    } | osascript;
}
